import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np
import os
import cv2

classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16*5*5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16*5*5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


def imshow(img):
    img = img / 2 + 0.5
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


if __name__ == '__main__':
    transform = transforms.Compose(
        [
            transforms.ToTensor(),
            transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
        ]
    )
    net = Net()

    if os.path.exists('./model.pth'):
        net.load_state_dict(torch.load("./model.pth"))
        correct = 0
        total = 0
        testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
        testloader = torch.utils.data.DataLoader(testset, batch_size=4, shuffle=False, num_workers=2)
        with torch.no_grad():
            for data in testloader:
                images, labels = data  # 这里取出“一张”图像，实际上是包含了4张小图和对应的4个标签
                # print(' '.join('%5s' % classes[labels[j]] for j in range(4)))
                # imshow(torchvision.utils.make_grid(images))  # 以上这两句代码展示一下test集的图片及其对应的标签，可以注释掉
                outputs = net(images)
                # 将net计算出来的tensor送入max，1表示取每行的最大值
                # max返回两个tensor，第一个tensor是每一行的最大值（一般舍弃），第二个tensor是每行最大值的索引
                _, predicted = torch.max(outputs.data, 1)
                total += labels.size(0)  # labels.size(0) = 4
                correct += (predicted == labels).sum().item()
                # 等号右边的意义就是：predicted中4个值和labels中的4个值相同的个数
        print('Accuracy of the network on the 10000 test images: %d %%' % (100 * correct / total))

        print('做个预测吧~，正在输入待预测的图片')
        for i in range(10):
            img_path = "./test_data/p" + str(i) + ".jpg"  # 构造路径（图像集放在项目根目录下）
            img = cv2.imread(img_path)
            img = transform(img)
            img = img.unsqueeze(0)                        # 最外围增加一个维度
            outputs = net(img)                            # 一维张量（含10个数值）
            _, predicted = torch.max(outputs, 1)
            # predicted是一个存储outputs最大值下标的tensor（也说明它只包含一个数值），那么predicted[0]就是outputs最大值的下标
            print('预测类别：', classes[predicted[0]])

    else:
        trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
        trainloader = torch.utils.data.DataLoader(trainset, batch_size=4, shuffle=True, num_workers=2)
        criterion = nn.CrossEntropyLoss()
        optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

        for epoch in range(4):                          # 反复训练4轮
            running_loss = 0.0                          # 每一轮刚开始累计的损失值清零
            for i, data in enumerate(trainloader, 0):   # 取出当前迭代的序号i和数据data
                inputs, labels = data                   # 图像数据inputs和标签数据labels
                optimizer.zero_grad()                   # 清零梯度
                outputs = net(inputs)                   # 喂数据
                loss = criterion(outputs, labels)       # 将计算结果和实际labels对比，计算出nn.CrossEntropyLoss
                loss.backward()                         # 反向传播计算得到每个参数的梯度值
                optimizer.step()                        # 执行梯度下降对参数进行更新
                running_loss += loss.item()
                if i % 2000 == 1999:
                    print('[%d, %5d] loss: %.3f' % (epoch + 1, i + 1, running_loss / 2000))
                    running_loss = 0.0
                    torch.save(net.state_dict(), "model.pth")  # 阶段保存模型

        torch.save(net.state_dict(), "model.pth")
        print('Finished Training')
